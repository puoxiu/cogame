// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/system.proto

package system_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemService_GetServerInfo_FullMethodName  = "/system_proto.SystemService/GetServerInfo"
	SystemService_GetServerStats_FullMethodName = "/system_proto.SystemService/GetServerStats"
	SystemService_ReloadConfig_FullMethodName   = "/system_proto.SystemService/ReloadConfig"
	SystemService_UpdateLoad_FullMethodName     = "/system_proto.SystemService/UpdateLoad"
	SystemService_Shutdown_FullMethodName       = "/system_proto.SystemService/Shutdown"
	SystemService_GetActorStats_FullMethodName  = "/system_proto.SystemService/GetActorStats"
	SystemService_GetPoolStats_FullMethodName   = "/system_proto.SystemService/GetPoolStats"
)

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 系统服务定义
type SystemServiceClient interface {
	// 获取服务器信息
	GetServerInfo(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// 获取服务器统计信息
	GetServerStats(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// 重新加载配置
	ReloadConfig(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// 更新服务器负载
	UpdateLoad(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// 关闭服务器
	Shutdown(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// 获取Actor统计信息
	GetActorStats(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// 获取对象池统计信息
	GetPoolStats(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) GetServerInfo(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SystemService_GetServerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetServerStats(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SystemService_GetServerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) ReloadConfig(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SystemService_ReloadConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UpdateLoad(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SystemService_UpdateLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) Shutdown(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SystemService_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetActorStats(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SystemService_GetActorStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetPoolStats(ctx context.Context, in *BaseRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, SystemService_GetPoolStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
// All implementations must embed UnimplementedSystemServiceServer
// for forward compatibility.
//
// 系统服务定义
type SystemServiceServer interface {
	// 获取服务器信息
	GetServerInfo(context.Context, *BaseRequest) (*BaseResponse, error)
	// 获取服务器统计信息
	GetServerStats(context.Context, *BaseRequest) (*BaseResponse, error)
	// 重新加载配置
	ReloadConfig(context.Context, *BaseRequest) (*BaseResponse, error)
	// 更新服务器负载
	UpdateLoad(context.Context, *BaseRequest) (*BaseResponse, error)
	// 关闭服务器
	Shutdown(context.Context, *BaseRequest) (*BaseResponse, error)
	// 获取Actor统计信息
	GetActorStats(context.Context, *BaseRequest) (*BaseResponse, error)
	// 获取对象池统计信息
	GetPoolStats(context.Context, *BaseRequest) (*BaseResponse, error)
	mustEmbedUnimplementedSystemServiceServer()
}

// UnimplementedSystemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemServiceServer struct{}

func (UnimplementedSystemServiceServer) GetServerInfo(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedSystemServiceServer) GetServerStats(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerStats not implemented")
}
func (UnimplementedSystemServiceServer) ReloadConfig(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfig not implemented")
}
func (UnimplementedSystemServiceServer) UpdateLoad(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoad not implemented")
}
func (UnimplementedSystemServiceServer) Shutdown(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedSystemServiceServer) GetActorStats(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorStats not implemented")
}
func (UnimplementedSystemServiceServer) GetPoolStats(context.Context, *BaseRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolStats not implemented")
}
func (UnimplementedSystemServiceServer) mustEmbedUnimplementedSystemServiceServer() {}
func (UnimplementedSystemServiceServer) testEmbeddedByValue()                       {}

// UnsafeSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServiceServer will
// result in compilation errors.
type UnsafeSystemServiceServer interface {
	mustEmbedUnimplementedSystemServiceServer()
}

func RegisterSystemServiceServer(s grpc.ServiceRegistrar, srv SystemServiceServer) {
	// If the following call pancis, it indicates UnimplementedSystemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemService_ServiceDesc, srv)
}

func _SystemService_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetServerInfo(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetServerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetServerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetServerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetServerStats(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_ReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_ReloadConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).ReloadConfig(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UpdateLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UpdateLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_UpdateLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UpdateLoad(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).Shutdown(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetActorStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetActorStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetActorStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetActorStats(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetPoolStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetPoolStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemService_GetPoolStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetPoolStats(ctx, req.(*BaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemService_ServiceDesc is the grpc.ServiceDesc for SystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "system_proto.SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInfo",
			Handler:    _SystemService_GetServerInfo_Handler,
		},
		{
			MethodName: "GetServerStats",
			Handler:    _SystemService_GetServerStats_Handler,
		},
		{
			MethodName: "ReloadConfig",
			Handler:    _SystemService_ReloadConfig_Handler,
		},
		{
			MethodName: "UpdateLoad",
			Handler:    _SystemService_UpdateLoad_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _SystemService_Shutdown_Handler,
		},
		{
			MethodName: "GetActorStats",
			Handler:    _SystemService_GetActorStats_Handler,
		},
		{
			MethodName: "GetPoolStats",
			Handler:    _SystemService_GetPoolStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/system.proto",
}
